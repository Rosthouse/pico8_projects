pico-8 cartridge // http://www.pico-8.com
version 41
__lua__
#include include/collision.lua

scene = 0

blocks = {}
paddle = {}
ball = {}
scenes = {}
ss = peek(0x5f57)

b_c = 7
b_r = 3

-- Engine Callbacks

function _init()
  setup_scenes()

  local b_w = ss / b_c * 0.75

  setup_blocks(b_c, b_r, b_w, b_w / 3)
  setup_paddle()
  setup_ball(ss)
end

function _update()
  scenes[scene].update()
end

function _draw()
  scenes[scene].draw()
end

-- Initialization

function setup_scenes()
  scene = 0

  scenes[0] = {
    update = start_update,
    draw = start_draw
  }

  scenes[1] = {
    update = game_update,
    draw = game_draw
  }
end

function setup_blocks(col, row, w, h)
  cls(0)
  local m_x = 20
  local m_y = 10

  m_x = 5
  w_m = ss / b_c - m_x
  for  y = 0, row - 1  do
    for  x = 0, col -1 do
      local i = x + y * col
      blocks[i] = {
        x = w_m + w_m * x, y = m_y * y, w = w - m_x, h = h, col = color(i % 14 + 1), a = true
      }
      print(i .. ": " .. blocks[i].x .. " " .. blocks[i].y)
    end
  end
end

function setup_paddle()
  -- Set up paddle
  paddle.xs = 20
  paddle.ys = 5
  paddle.x = 128 / 2 - paddle.xs / 2
  paddle.y = 128 - 10 - paddle.ys / 2
  paddle.speed = 2
end

function setup_ball(size)
  ball.x = paddle.x + 12
  ball.y = paddle.y - 10
  ball.r = 2
  ball.v_x = 1
  ball.v_y = -1
  ball.col = color(12)
end

-- Start Scene

function start_update()
  scene = 1
end

function start_draw()
end

-- Game Scene

function game_update()
  update_paddle()
  update_ball()

  local bb = box(ball.x - ball.r, ball.y - ball.r, ball.x + ball.r, ball.y + ball.r)
  local pb = box(paddle.x, paddle.y, paddle.x + 16, paddle.y + 8)

  if coll(bb, pb) then
    ball.v_y = -ball.v_y
  end

  for _, b in pairs(blocks) do
    local bbb = box(b.x, b.y, b.x + b.w, b.y + b.h)

    if coll(bb, pb) then
      ball.v_y = -ball.v_y
      b.a = false
    end
  end

end

function update_paddle()
  if btn(0) then paddle.x = paddle.x - paddle.speed end
  if btn(1) then paddle.x = paddle.x + paddle.speed end

  if paddle.x < 0 then paddle.x = 0 end
  if paddle.x > 128 - 24 then paddle.x = 128 - 24 end
end

function update_ball()
  ball.x = ball.x + ball.v_x
  ball.y = ball.y + ball.v_y

  if ball.x < 0 then ball.v_x = -ball.v_x end
  if ball.x > ss then ball.v_x = -ball.v_x end
end

function game_draw()
  cls(0)


  -- Draw blocks
  for i = 0, #blocks, 1 do
    local b = blocks[i]
    if b.a == true then
      rectfill(b.x, b.y, b.x + b.w, b.y + b.h, b.col)
    end
  end

  -- Draw player
  spr(1, paddle.x, paddle.y, 3, 1)

  -- Draw ball
  circfill(ball.x, ball.y, ball.r, ball.col)
end

__gfx__
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000008888888888888888888800000000000111111111111111111111111111111111111111111111111111111100000000000000000000000000000000
00700700081111111111111111111180000000000111111111111111111111111111111111111111111111111111111100000000000000000000000000000000
00077000811111111111111111111118000000000111111111111111111111111111111111111111111111111111111100000000000000000000000000000000
00077000811111111111111111111118000000000111111111111111111111111111111111111111111111111111111100000000000000000000000000000000
00700700081111111111111111111180000000000118111111111111111111111111111111111111111111111111111100000000000000000000000000000000
00000000008888888888888888888800000000000118811111111111111111111111111111111111111111111111111100000000000000000000000000000000
00000000000000000000000000000000000000000111888888881111111111111111111111111111111111111111111100000000000000000000000000000000
00000000000770000007700000077000000000000111811111188111111111111111111111111111111111111811111100000000000000000000000000000000
00000000000770000007700000077000000000000111811111118111111111111111111111111111111111111811111100000000000000000000000000000000
00000000000700000007000000070000000000000111881188118111111111111111111111111111111111111811111100000000000000000000000000000000
00000000007800000078700000787000000000000111181118888111111888111111111111111111111111111811111100000000000000000000000000000000
00000000087888000078700008887800000000000111181111118111188818811111111111111111111111118118111100000000000000000000000000000000
00000000007770000008700008077000000000000111181111188111188111811118888111111111111111118111111100000000000000000000000000000000
00000000077070000008700007707000000000000111181118881111188111118888008111181188811111118111111100000000000000000000000000000000
00000000070070000007700007007000000000000111188111111111188111118000888111181181881111118811111100000000000000000000000000000000
00000000000000000000000000000000000000000111111111111111181111118888811118181881188111111111111100000000000000000000000000000000
00000000000000000000000000000000000000000111111111881111111111111888111888188811118811111111111100000000000000000000000000000000
00000000000000000000000000000000000000000111111111181111111111111118888811111111111111111111111100000000000000000000000000000000
00000000000000000000000000000000000000000111111111181111111111111111111111111111111111111111111100000000000000000000000000000000
00000000000000000000000000000000000000000111111111118111111111111111111111111111111111111111111100000000000000000000000000000000
00000000000000000000000000000000000000000111111111118811111111111111111111111111111111111111111100000000000000000000000000000000
00000000000000000000000000000000000000000111111111111811111111111111111111111111111111111111111100000000000000000000000000000000
00000000000000000000000000000000000000000111111111111188111111111111111111111111111111111111111100000000000000000000000000000000
00000000000000000000000000000000000000000111111111111118111111111111111111111111111111111111111100000000000000000000000000000000
00000000000000000000000000000000000000000111111111111118811111111111111111111111111111111111111100000000000000000000000000000000
00000000000000000000000000000000000000000111111111111111888111111111111111111111111111111111111100000000000000000000000000000000
00000000000000000000000000000000000000000111111111111111881111111111111111111111111111111111111100000000000000000000000000000000
00000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111100000000000000000000000000000000
00000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111100000000000000000000000000000000
00000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111100000000000000000000000000000000
00000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111100000000000000000000000000000000
00000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111100000000000000000000000000000000
